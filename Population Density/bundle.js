(function (d3) {
  'use strict';

  const svg = d3.select('svg');


  const height = +svg.attr('height');
  const width = parseFloat(svg.attr('width'));

  const render = data => {
    
    const xValue = d => d.populationDensity;
    const yValue = d => d.country;
    const margin = {top : 40, right : 20,left : 130, bottom : 50};
    const innerWidth = width - margin.left - margin.right;
    const innerHeight = height - margin.top - margin.bottom;
    
  	const xScale = d3.scaleLinear()
    	.domain([0,d3.max(data,xValue)])
  		.range([0,innerWidth]);
    
    const yScale = d3.scaleBand()
    	.domain(data.map(yValue))
    	.range([0,innerHeight])
    	.padding(0.1);
    
    const yAxis = d3.axisLeft(yScale);
    
    /*const xAxisTickFormat = number => 
    	format('.3s')(number)
    		.replace('G','B');*/
    
    const xAxis = d3.axisBottom(xScale)
    	.tickSize(-innerHeight);
    
  	svg.append('text')
    	.text('Population Density Unit(People/1000 x kmÂ²)')
    	.attr('transform',`translate(20,${height/2 + 200}) rotate(-90)`);
    	
    
    
    const g = svg.append('g')
    	.attr('transform',`translate(${margin.left},${margin.top})`);
    
    const text = svg.append('text')
    	.text('Top 20 Densest Cities or Regioins')
    	.attr('transform','translate(250,30)')
    	.attr('class','title');
    
    text.style("font-size", "30px");

    /*const text = svg.append('text')
    	.text('Top 10 Densest City Or Regioin');*/
    	
    /*text.style("font-size", "25px");	*/
    
    g.append('g').call(yAxis)
    	.selectAll('.domain, .tick line')
    	.remove();
    
    const xAxisG = g.append('g').call(xAxis)
    	.attr('transform',`translate(0,${innerHeight})`);
      
    
    xAxisG.select('.domain')
    	.remove();
    

    
    xAxisG.append('text')
    	.attr('y',40)
    	.attr('x',innerWidth / 2)
    	.attr('fill','black')
    	.text('Density');
    
    /*g.append('text')
  		.text("hello")
    	.attr('transform',`translate(0,${innerHeight + 35})`);*/
    
    g.selectAll('rect').data(data)
    	.enter().append('rect')
    		.attr('y', d => yScale(yValue(d)))
    		.attr('width',d => xScale(xValue(d)))
    		.attr('height',yScale.bandwidth());
    
   
  };



  d3.csv('data.csv').then(data => {
  	data.forEach(d => {
    	d.populationDensity = d.populationDensity / 1000;
    });
    
    render(data);
  });

}(d3));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7c2VsZWN0LCBjc3Ysc2NhbGVMaW5lYXIsbWF4LHNjYWxlQmFuZCxheGlzTGVmdCxheGlzQm90dG9tLGZvcm1hdH0gZnJvbSAnZDMnO1xuXG5jb25zdCBzdmcgPSBzZWxlY3QoJ3N2ZycpO1xuXG5cbmNvbnN0IGhlaWdodCA9ICtzdmcuYXR0cignaGVpZ2h0Jyk7XG5jb25zdCB3aWR0aCA9IHBhcnNlRmxvYXQoc3ZnLmF0dHIoJ3dpZHRoJykpO1xuXG5jb25zdCByZW5kZXIgPSBkYXRhID0+IHtcbiAgXG4gIGNvbnN0IHhWYWx1ZSA9IGQgPT4gZC5wb3B1bGF0aW9uRGVuc2l0eTtcbiAgY29uc3QgeVZhbHVlID0gZCA9PiBkLmNvdW50cnk7XG4gIGNvbnN0IG1hcmdpbiA9IHt0b3AgOiA0MCwgcmlnaHQgOiAyMCxsZWZ0IDogMTMwLCBib3R0b20gOiA1MH07XG4gIGNvbnN0IGlubmVyV2lkdGggPSB3aWR0aCAtIG1hcmdpbi5sZWZ0IC0gbWFyZ2luLnJpZ2h0O1xuICBjb25zdCBpbm5lckhlaWdodCA9IGhlaWdodCAtIG1hcmdpbi50b3AgLSBtYXJnaW4uYm90dG9tO1xuICBcblx0Y29uc3QgeFNjYWxlID0gc2NhbGVMaW5lYXIoKVxuICBcdC5kb21haW4oWzAsbWF4KGRhdGEseFZhbHVlKV0pXG5cdFx0LnJhbmdlKFswLGlubmVyV2lkdGhdKTtcbiAgXG4gIGNvbnN0IHlTY2FsZSA9IHNjYWxlQmFuZCgpXG4gIFx0LmRvbWFpbihkYXRhLm1hcCh5VmFsdWUpKVxuICBcdC5yYW5nZShbMCxpbm5lckhlaWdodF0pXG4gIFx0LnBhZGRpbmcoMC4xKTtcbiAgXG4gIGNvbnN0IHlBeGlzID0gYXhpc0xlZnQoeVNjYWxlKTtcbiAgXG4gIC8qY29uc3QgeEF4aXNUaWNrRm9ybWF0ID0gbnVtYmVyID0+IFxuICBcdGZvcm1hdCgnLjNzJykobnVtYmVyKVxuICBcdFx0LnJlcGxhY2UoJ0cnLCdCJyk7Ki9cbiAgXG4gIGNvbnN0IHhBeGlzID0gYXhpc0JvdHRvbSh4U2NhbGUpXG4gIFx0LnRpY2tTaXplKC1pbm5lckhlaWdodCk7XG4gIFxuXHRzdmcuYXBwZW5kKCd0ZXh0JylcbiAgXHQudGV4dCgnUG9wdWxhdGlvbiBEZW5zaXR5IFVuaXQoUGVvcGxlLzEwMDAgeCBrbcOCwrIpJylcbiAgXHQuYXR0cigndHJhbnNmb3JtJyxgdHJhbnNsYXRlKDIwLCR7aGVpZ2h0LzIgKyAyMDB9KSByb3RhdGUoLTkwKWApO1xuICBcdFxuICBcbiAgXG4gIGNvbnN0IGcgPSBzdmcuYXBwZW5kKCdnJylcbiAgXHQuYXR0cigndHJhbnNmb3JtJyxgdHJhbnNsYXRlKCR7bWFyZ2luLmxlZnR9LCR7bWFyZ2luLnRvcH0pYCk7XG4gIFxuICBjb25zdCB0ZXh0ID0gc3ZnLmFwcGVuZCgndGV4dCcpXG4gIFx0LnRleHQoJ1RvcCAyMCBEZW5zZXN0IENpdGllcyBvciBSZWdpb2lucycpXG4gIFx0LmF0dHIoJ3RyYW5zZm9ybScsJ3RyYW5zbGF0ZSgyNTAsMzApJylcbiAgXHQuYXR0cignY2xhc3MnLCd0aXRsZScpO1xuICBcbiAgdGV4dC5zdHlsZShcImZvbnQtc2l6ZVwiLCBcIjMwcHhcIik7XG5cbiAgLypjb25zdCB0ZXh0ID0gc3ZnLmFwcGVuZCgndGV4dCcpXG4gIFx0LnRleHQoJ1RvcCAxMCBEZW5zZXN0IENpdHkgT3IgUmVnaW9pbicpOyovXG4gIFx0XG4gIC8qdGV4dC5zdHlsZShcImZvbnQtc2l6ZVwiLCBcIjI1cHhcIik7XHQqL1xuICBcbiAgZy5hcHBlbmQoJ2cnKS5jYWxsKHlBeGlzKVxuICBcdC5zZWxlY3RBbGwoJy5kb21haW4sIC50aWNrIGxpbmUnKVxuICBcdC5yZW1vdmUoKTtcbiAgXG4gIGNvbnN0IHhBeGlzRyA9IGcuYXBwZW5kKCdnJykuY2FsbCh4QXhpcylcbiAgXHQuYXR0cigndHJhbnNmb3JtJyxgdHJhbnNsYXRlKDAsJHtpbm5lckhlaWdodH0pYCk7XG4gICAgXG4gIFxuICB4QXhpc0cuc2VsZWN0KCcuZG9tYWluJylcbiAgXHQucmVtb3ZlKCk7XG4gIFxuXG4gIFxuICB4QXhpc0cuYXBwZW5kKCd0ZXh0JylcbiAgXHQuYXR0cigneScsNDApXG4gIFx0LmF0dHIoJ3gnLGlubmVyV2lkdGggLyAyKVxuICBcdC5hdHRyKCdmaWxsJywnYmxhY2snKVxuICBcdC50ZXh0KCdEZW5zaXR5Jyk7XG4gIFxuICAvKmcuYXBwZW5kKCd0ZXh0Jylcblx0XHQudGV4dChcImhlbGxvXCIpXG4gIFx0LmF0dHIoJ3RyYW5zZm9ybScsYHRyYW5zbGF0ZSgwLCR7aW5uZXJIZWlnaHQgKyAzNX0pYCk7Ki9cbiAgXG4gIGcuc2VsZWN0QWxsKCdyZWN0JykuZGF0YShkYXRhKVxuICBcdC5lbnRlcigpLmFwcGVuZCgncmVjdCcpXG4gIFx0XHQuYXR0cigneScsIGQgPT4geVNjYWxlKHlWYWx1ZShkKSkpXG4gIFx0XHQuYXR0cignd2lkdGgnLGQgPT4geFNjYWxlKHhWYWx1ZShkKSkpXG4gIFx0XHQuYXR0cignaGVpZ2h0Jyx5U2NhbGUuYmFuZHdpZHRoKCkpO1xuICBcbiBcbn07XG5cblxuXG5jc3YoJ2RhdGEuY3N2JykudGhlbihkYXRhID0+IHtcblx0ZGF0YS5mb3JFYWNoKGQgPT4ge1xuICBcdGQucG9wdWxhdGlvbkRlbnNpdHkgPSBkLnBvcHVsYXRpb25EZW5zaXR5IC8gMTAwMDtcbiAgfSk7XG4gIFxuICByZW5kZXIoZGF0YSk7XG59KVxuIl0sIm5hbWVzIjpbInNlbGVjdCIsInNjYWxlTGluZWFyIiwibWF4Iiwic2NhbGVCYW5kIiwiYXhpc0xlZnQiLCJheGlzQm90dG9tIiwiY3N2Il0sIm1hcHBpbmdzIjoiOzs7RUFFQSxNQUFNLEdBQUcsR0FBR0EsU0FBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzFCO0FBQ0E7RUFDQSxNQUFNLE1BQU0sR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7RUFDbkMsTUFBTSxLQUFLLEdBQUcsVUFBVSxDQUFDLEdBQUcs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

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7c2VsZWN0LCBjc3Ysc2NhbGVMaW5lYXIsbWF4LHNjYWxlQmFuZCxheGlzTGVmdCxheGlzQm90dG9tfSBmcm9tICdkMyc7XG5cbmNvbnN0IHN2ZyA9IHNlbGVjdCgnc3ZnJyk7XG5cblxuY29uc3QgaGVpZ2h0ID0gK3N2Zy5hdHRyKCdoZWlnaHQnKTtcbmNvbnN0IHdpZHRoID0gcGFyc2VGbG9hdChzdmcuYXR0cignd2lkdGgnKSk7XG5cbmNvbnN0IHJlbmRlciA9IGRhdGEgPT4ge1xuICBcbiAgY29uc3QgeFZhbHVlID0gZCA9PiBkLnBvcHVsYXRpb25EZW5zaXR5O1xuICBjb25zdCB5VmFsdWUgPSBkID0+IGQuY291bnRyeTtcbiAgY29uc3QgbWFyZ2luID0ge3RvcCA6IDIwLCByaWdodCA6IDIwLGxlZnQgOiAxMzAsIGJvdHRvbSA6IDIwfTtcbiAgY29uc3QgaW5uZXJXaWR0aCA9IHdpZHRoIC0gbWFyZ2luLmxlZnQgLSBtYXJnaW4ucmlnaHQ7XG4gIGNvbnN0IGlubmVySGVpZ2h0ID0gaGVpZ2h0IC0gbWFyZ2luLnRvcCAtIG1hcmdpbi5ib3R0b207XG4gIFxuXHRjb25zdCB4U2NhbGUgPSBzY2FsZUxpbmVhcigpXG4gIFx0LmRvbWFpbihbMCxtYXgoZGF0YSx4VmFsdWUpXSlcblx0XHQucmFuZ2UoWzAsaW5uZXJXaWR0aF0pO1xuICBcbiAgY29uc3QgeVNjYWxlID0gc2NhbGVCYW5kKClcbiAgXHQuZG9tYWluKGRhdGEubWFwKHlWYWx1ZSkpXG4gIFx0LnJhbmdlKFswLGlubmVySGVpZ2h0XSlcbiAgXHQucGFkZGluZygwLjEpO1xuICBcbiAgY29uc3QgeUF4aXMgPSBheGlzTGVmdCh5U2NhbGUpO1xuICBjb25zdCB4QXhpcyA9IGF4aXNCb3R0b20oeFNjYWxlKTtcbiAgXG5cdHN2Zy5hcHBlbmQoJ3RleHQnKVxuICBcdC50ZXh0KCdQb3B1bGF0aW9uIERlbnNpdHkgVW5pdChQZW9wbGUvMTAwMCB4IGttw4LCsiknKVxuICBcdC5hdHRyKCd0cmFuc2Zvcm0nLGB0cmFuc2xhdGUoMjAsJHtoZWlnaHQvMiArIDIwMH0pIHJvdGF0ZSgtOTApYClcbiAgXHRcbiAgXHRcbiAgXG4gIGNvbnN0IGcgPSBzdmcuYXBwZW5kKCdnJylcbiAgXHQuYXR0cigndHJhbnNmb3JtJyxgdHJhbnNsYXRlKCR7bWFyZ2luLmxlZnR9LCR7bWFyZ2luLnRvcH0pYCk7XG4gIFxuICBcbiAgXHRcbiAgXG4gIGcuYXBwZW5kKCdnJykuY2FsbCh5QXhpcyk7XG4gIGcuYXBwZW5kKCdnJykuY2FsbCh4QXhpcylcbiAgXHQuYXR0cigndHJhbnNmb3JtJyxgdHJhbnNsYXRlKDAsJHtpbm5lckhlaWdodH0pYCk7XG4gIC8qZy5hcHBlbmQoJ3RleHQnKVxuXHRcdC50ZXh0KFwiaGVsbG9cIilcbiAgXHQuYXR0cigndHJhbnNmb3JtJyxgdHJhbnNsYXRlKDAsJHtpbm5lckhlaWdodCArIDM1fSlgKTsqL1xuICBcbiAgZy5zZWxlY3RBbGwoJ3JlY3QnKS5kYXRhKGRhdGEpXG4gIFx0LmVudGVyKCkuYXBwZW5kKCdyZWN0JylcbiAgXHRcdC5hdHRyKCd5JywgZCA9PiB5U2NhbGUoeVZhbHVlKGQpKSlcbiAgXHRcdC5hdHRyKCd3aWR0aCcsZCA9PiB4U2NhbGUoeFZhbHVlKGQpKSlcbiAgXHRcdC5hdHRyKCdoZWlnaHQnLHlTY2FsZS5iYW5kd2lkdGgoKSk7XG4gIFxuIFxufTtcblxuXG5cbmNzdignZGF0YS5jc3YnKS50aGVuKGRhdGEgPT4ge1xuXHRkYXRhLmZvckVhY2goZCA9PiB7XG4gIFx0ZC5wb3B1bGF0aW9uRGVuc2l0eSA9IGQucG9wdWxhdGlvbkRlbnNpdHkgLyAxMDAwO1xuICB9KTtcbiAgXG4gIHJlbmRlcihkYXRhKTtcbn0pXG4iXSwibmFtZXMiOlsic2VsZWN0Iiwic2NhbGVMaW5lYXIiLCJtYXgiLCJzY2FsZUJhbmQiLCJheGlzTGVmdCIsImF4aXNCb3R0b20iLCJjc3YiXSwi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
(function (d3) {
  'use strict';

  const svg = d3.select('svg');


  const height = +svg.attr('height');
  const width = parseFloat(svg.attr('width'));

  const render = data => {
    
    const xValue = d => d.populationDensity;
    const yValue = d => d.country;
    const margin = {top : 20, right : 20,left : 130, bottom : 20};
    const innerWidth = width - margin.left - margin.right;
    const innerHeight = height - margin.top - margin.bottom;
    
  	const xScale = d3.scaleLinear()
    	.domain([0,d3.max(data,xValue)])
  		.range([0,innerWidth]);
    
    const yScale = d3.scaleBand()
    	.domain(data.map(yValue))
    	.range([0,innerHeight])
    	.padding(0.1);
    
    const yAxis = d3.axisLeft(yScale);
    const xAxis = d3.axisBottom(xScale);
    
  	svg.append('text')
    	.text('Population Density Unit(People/1000 x kmÂ²)')
    	.attr('transform',`translate(20,${height/2 + 200}) rotate(-90)`);
    	
    	
    
    const g = svg.append('g')
    	.attr('transform',`translate(${margin.left},${margin.top})`);
    
    
    	
    
    g.append('g').call(yAxis);
    g.append('g').call(xAxis)
    	.attr('transform',`translate(0,${innerHeight})`);
    /*g.append('text')
  		.text("hello")
    	.attr('transform',`translate(0,${innerHeight + 35})`);*/
    
    g.selectAll('rect').data(data)
    	.enter().append('rect')
    		.attr('y', d => yScale(yValue(d)))
    		.attr('width',d => xScale(xValue(d)))
    		.attr('height',yScale.bandwidth());
    
   
  };



  d3.csv('data.csv').then(data => {
  	data.forEach(d => {
    	d.populationDensity = d.populationDensity / 1000;
    });
    
    render(data);
  });

}(d3));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7c2VsZWN0LCBjc3Ysc2NhbGVMaW5lYXIsbWF4LHNjYWxlQmFuZCxheGlzTGVmdCxheGlzQm90dG9tfSBmcm9tICdkMyc7XG5cbmNvbnN0IHN2ZyA9IHNlbGVjdCgnc3ZnJyk7XG5cblxuY29uc3QgaGVpZ2h0ID0gK3N2Zy5hdHRyKCdoZWlnaHQnKTtcbmNvbnN0IHdpZHRoID0gcGFyc2VGbG9hdChzdmcuYXR0cignd2lkdGgnKSk7XG5cbmNvbnN0IHJlbmRlciA9IGRhdGEgPT4ge1xuICBcbiAgY29uc3QgeFZhbHVlID0gZCA9PiBkLnBvcHVsYXRpb25EZW5zaXR5O1xuICBjb25zdCB5VmFsdWUgPSBkID0+IGQuY291bnRyeTtcbiAgY29uc3QgbWFyZ2luID0ge3RvcCA6IDIwLCByaWdodCA6IDIwLGxlZnQgOiAxMzAsIGJvdHRvbSA6IDIwfTtcbiAgY29uc3QgaW5uZXJXaWR0aCA9IHdpZHRoIC0gbWFyZ2luLmxlZnQgLSBtYXJnaW4ucmlnaHQ7XG4gIGNvbnN0IGlubmVySGVpZ2h0ID0gaGVpZ2h0IC0gbWFyZ2luLnRvcCAtIG1hcmdpbi5ib3R0b207XG4gIFxuXHRjb25zdCB4U2NhbGUgPSBzY2FsZUxpbmVhcigpXG4gIFx0LmRvbWFpbihbMCxtYXgoZGF0YSx4VmFsdWUpXSlcblx0XHQucmFuZ2UoWzAsaW5uZXJXaWR0aF0pO1xuICBcbiAgY29uc3QgeVNjYWxlID0gc2NhbGVCYW5kKClcbiAgXHQuZG9tYWluKGRhdGEubWFwKHlWYWx1ZSkpXG4gIFx0LnJhbmdlKFswLGlubmVySGVpZ2h0XSlcbiAgXHQucGFkZGluZygwLjEpO1xuICBcbiAgY29uc3QgeUF4aXMgPSBheGlzTGVmdCh5U2NhbGUpO1xuICBjb25zdCB4QXhpcyA9IGF4aXNCb3R0b20oeFNjYWxlKTtcbiAgXG5cdHN2Zy5hcHBlbmQoJ3RleHQnKVxuICBcdC50ZXh0KCdQb3B1bGF0aW9uIERlbnNpdHkgVW5pdChQZW9wbGUvMTAwMCB4IGttw4LCsiknKVxuICBcdC5hdHRyKCd0cmFuc2Zvcm0nLGB0cmFuc2xhdGUoMjAsJHtoZWlnaHQvMiArIDIwMH0pIHJvdGF0ZSgtOTApYClcbiAgXHRcbiAgXHRcbiAgXG4gIGNvbnN0IGcgPSBzdmcuYXBwZW5kKCdnJylcbiAgXHQuYXR0cigndHJhbnNmb3JtJyxgdHJhbnNsYXRlKCR7bWFyZ2luLmxlZnR9LCR7bWFyZ2luLnRvcH0pYCk7XG4gIFxuICBcbiAgXHRcbiAgXG4gIGcuYXBwZW5kKCdnJykuY2FsbCh5QXhpcyk7XG4gIGcuYXBwZW5kKCdnJykuY2FsbCh4QXhpcylcbiAgXHQuYXR0cigndHJhbnNmb3JtJyxgdHJhbnNsYXRlKDAsJHtpbm5lckhlaWdodH0pYCk7XG4gIC8qZy5hcHBlbmQoJ3RleHQnKVxuXHRcdC50ZXh0KFwiaGVsbG9cIilcbiAgXHQuYXR0cigndHJhbnNmb3JtJyxgdHJhbnNsYXRlKDAsJHtpbm5lckhlaWdodCArIDM1fSlgKTsqL1xuICBcbiAgZy5zZWxlY3RBbGwoJ3JlY3QnKS5kYXRhKGRhdGEpXG4gIFx0LmVudGVyKCkuYXBwZW5kKCdyZWN0JylcbiAgXHRcdC5hdHRyKCd5JywgZCA9PiB5U2NhbGUoeVZhbHVlKGQpKSlcbiAgXHRcdC5hdHRyKCd3aWR0aCcsZCA9PiB4U2NhbGUoeFZhbHVlKGQpKSlcbiAgXHRcdC5hdHRyKCdoZWlnaHQnLHlTY2FsZS5iYW5kd2lkdGgoKSk7XG4gIFxuIFxufTtcblxuXG5cbmNzdignZGF0YS5jc3YnKS50aGVuKGRhdGEgPT4ge1xuXHRkYXRhLmZvckVhY2goZCA9PiB7XG4gIFx0ZC5wb3B1bGF0aW9uRGVuc2l0eSA9IGQucG9wdWxhdGlvbkRlbnNpdHkgLyAxMDAwO1xuICB9KTtcbiAgXG4gIHJlbmRlcihkYXRhKTtcbn0pXG4iXSwibmFtZXMiOlsic2VsZWN0Iiwic2NhbGVMaW5lYXIiLCJtYXgiLCJzY2FsZUJhbmQiLCJheGlzTGVmdCIsImF4aXNCb3R0b20iLCJjc3YiXSwi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